@page "/inventory-dashboard"
@attribute [Authorize(Roles = "InventoryManager")]

@using SEP3_T1_BlazorUI.Presentation.Managers;
@using SEP3_T1_BlazorUI.Models;
@inject InventoryManager Manager
@inject Blazored.Toast.Services.IToastService ToastService

<PageTitle>Home</PageTitle>

<h1>Inventory Dashboard</h1>

<p>Welcome to your inventory management system.</p>

<!-- Search Bar -->
<div class="input-group mb-3">
    <div class="input-group-prepend">
        <span class="input-group-text h-100 w-100">
            <i class="fas fa-search"></i>
        </span>
    </div>
    <input type="text"
           class="form-control"
           placeholder="Search by Name or Description"
           @bind="Manager.SearchQuery"
           @bind:event="oninput" />
    <div class="input-group-append">
        <button class="btn btn-outline-secondary" @onclick="Manager.ClearSearch" type="button">
            <i class="fas fa-times"></i> Clear
        </button>
    </div>
</div>

<table class="table table-bordered table-hover">
    <thead class="thead-dark">
        <tr>
            <th class="text-center">Select</th>
            <th @onclick="() => Manager.SortByName()" style="cursor: pointer;">
                Name
                <i class="@Manager.GetSortIcon("Name")"></i>
            </th>
            <th @onclick="() => Manager.SortByDescription()" style="cursor: pointer;">
                Description
                <i class="@Manager.GetSortIcon("Description")"></i>
            </th>
            <th>ID</th>
            <th @onclick="() => Manager.SortByQuantityInStore()" style="cursor: pointer;">
                Quantity In Store
                <i class="@Manager.GetSortIcon("QuantityInStore")"></i>
            </th>
            <th>Order Quantity</th>
            <th class="text-center">Delete</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Manager.PagedItems)
        {
            <tr @key="item.Id">
                <td class="text-center">
                    <InputCheckbox @bind-Value="item.IsSelected" disabled="@((item.QuantityInStore == 0))" />
                </td>
                <td>
                    <input type="text"
                           class="form-control"
                           value="@_nameInputs[item.Id]"
                           @oninput="(ChangeEventArgs args) => _nameInputs[item.Id] = args.Value?.ToString()"
                           @onblur="() => UpdateItemOnBlur(item, nameof(item.Name), _nameInputs[item.Id])" />
                </td>

                <td>
                    <input type="text"
                           class="form-control"
                           value="@_descriptionInputs[item.Id]"
                           @oninput="(ChangeEventArgs args) => _descriptionInputs[item.Id] = args.Value?.ToString()"
                           @onblur="() => UpdateItemOnBlur(item, nameof(item.Description), _descriptionInputs[item.Id])" />
                </td>

                <td>@item.Id</td>

                <td>
                    <input type="number"
                           class="form-control"
                           min="0"
                           value="@_quantityInputs[item.Id]"
                           @oninput="(ChangeEventArgs args) => _quantityInputs[item.Id] = args.Value?.ToString()"
                           @onblur="() => UpdateItemOnBlur(item, nameof(item.QuantityInStore), _quantityInputs[item.Id])" />
                </td>

                <td>
                    <input type="number"
                           class="form-control"
                           min="1"
                           @bind="item.OrderQuantity"
                           @bind:event="oninput"
                           @onblur="() => ResetOrderQuantityOnBlur(item)"
                           disabled="@(!item.IsSelected || item.QuantityInStore == 0)" />
                </td>

                <td class="text-center">
                    <button class="btn btn-danger btn-sm" @onclick="() => DeleteItem(item)">
                        <i class="fas fa-trash-alt"></i> Delete
                    </button>
                </td>
            </tr>
        }
    </tbody>


</table>


<!-- Pagination -->
<div class="d-flex justify-content-between align-items-center mt-3">
    <button class="btn btn-secondary" @onclick="Manager.PreviousPage" disabled="@Manager.IsFirstPage">
        <i class="fas fa-arrow-left"></i> Previous
    </button>
    <span>Page @Manager.CurrentPage of @Manager.TotalPages</span>
    <button class="btn btn-secondary" @onclick="Manager.NextPage" disabled="@Manager.IsLastPage">
        Next <i class="fas fa-arrow-right"></i>
    </button>
</div>

<!-- Place Order Button -->
<div class="my-3">
    <button class="btn btn-primary w-100" @onclick="PlaceOrder" disabled="@(!Manager.HasSelectedItems)">
        <i class="fas fa-shopping-cart"></i> Place Order
    </button>
</div>

@code {
    // Local state to track inputs for Name, Description, and Quantity
    private Dictionary<int, string> _nameInputs = new();
    private Dictionary<int, string> _descriptionInputs = new();
    private Dictionary<int, string> _quantityInputs = new();

    protected override void OnInitialized()
    {
        Manager?.LoadData();
        InitializeLocalInputs();
    }

    private void InitializeLocalInputs()
    {
        foreach (var item in Manager.PagedItems)
        {
            _nameInputs[item.Id] = item.Name;
            _descriptionInputs[item.Id] = item.Description;
            _quantityInputs[item.Id] = item.QuantityInStore.ToString();
        }
    }

    private void UpdateItemOnBlur(Item item, string propertyName, string? newValue)
    {
        if (string.IsNullOrWhiteSpace(newValue))
        {
            ToastService.ShowError($"{propertyName} cannot be empty. Reverting to the previous value.");
            RevertInputValue(item, propertyName);
            return;
        }

        newValue = newValue.Trim(); // Trim to avoid unnecessary updates due to extra spaces

        // Validation and Change Detection for Name
        if (propertyName == nameof(Item.Name))
        {
            if (item.Name == newValue)
            {
                return; // No change, so exit early
            }

            item.Name = newValue;
            _nameInputs[item.Id] = newValue;
        }

        // **NEW: Validation and Change Detection for Description**
        if (propertyName == nameof(Item.Description))
        {
            if (item.Description == newValue)
            {
                return; // No change, so exit early
            }

            item.Description = newValue;
            _descriptionInputs[item.Id] = newValue;
        }

        // Validation and Change Detection for QuantityInStore
        if (propertyName == nameof(Item.QuantityInStore))
        {
            if (!int.TryParse(newValue, out var quantity))
            {
                ToastService.ShowError("Quantity In Store must be a number. Reverting to the previous value.");
                RevertInputValue(item, propertyName);
                return;
            }

            if (quantity < 0)
            {
                ToastService.ShowError("Quantity In Store cannot be negative. Reverting to the previous value.");
                RevertInputValue(item, propertyName);
                return;
            }

            if (item.QuantityInStore == quantity)
            {
                return; // No change, so exit early
            }

            item.QuantityInStore = quantity;
            _quantityInputs[item.Id] = quantity.ToString();

            if (quantity == 0)
            {
                item.OrderQuantity = 0;
            }
            else if (item.OrderQuantity > item.QuantityInStore)
            {
                item.OrderQuantity = item.QuantityInStore;
            }
        }

        // Update the item in the system only if there were changes
        Manager.UpdateItem(item);
        ToastService.ShowSuccess($"Item '{item.Name}' updated successfully!");
    }


    private void RevertInputValue(Item item, string propertyName)
    {
        if (propertyName == nameof(Item.Name))
        {
            _nameInputs[item.Id] = item.Name;
        }
        else if (propertyName == nameof(Item.QuantityInStore))
        {
            _quantityInputs[item.Id] = item.QuantityInStore.ToString();
        }
        StateHasChanged();
    }


    private void ResetOrderQuantityOnBlur(Item item)
    {
        if (item.QuantityInStore == 0)
        {
            item.OrderQuantity = 0;
        }
        else if (item.OrderQuantity > item.QuantityInStore)
        {
            item.OrderQuantity = item.QuantityInStore;
            ToastService.ShowWarning($"Order quantity for '{item.Name}' has been reset to {item.QuantityInStore} after editing.");
        }
        else if (item.OrderQuantity < 1)
        {
            item.OrderQuantity = 1;
            ToastService.ShowWarning($"Order quantity for '{item.Name}' has been reset to 1 after editing.");
        }
        StateHasChanged();
    }

    private void DeleteItem(Item item)
    {
        Manager.DeleteItem(item);
        ToastService.ShowSuccess($"Item '{item.Name}' deleted successfully!");
        StateHasChanged();
    }

    private async Task PlaceOrder()
    {
        await Manager.PlaceOrder();
        ToastService.ShowSuccess("Order placed successfully");
    }
}
