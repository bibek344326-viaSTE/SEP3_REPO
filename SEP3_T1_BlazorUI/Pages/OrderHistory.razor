@page "/order-history"
@using SEP3_T1_BlazorUI.Application.UseCases;
@using SEP3_T1_BlazorUI.Models;

@inject SEP3_T1_BlazorUI.Application.UseCases.OrderUseCases OrderUseCases

<PageTitle>Order History</PageTitle>

<h1 class="text-center">Order History</h1>

<div class="d-flex align-items-center justify-content-center mb-3 w-100">
    <div class="me-3">
        <select class="form-select" @bind="SelectedStatus" @bind:event="onchange">
            <option value="">All Statuses</option>
            <option value="Completed">Completed</option>
            <option value="Pending">Pending</option>
            <option value="Rejected">Rejected</option>
        </select>
    </div>

    <div class="input-group">
        <span class="input-group-text">
            <i class="fas fa-search"></i>
        </span>
        <input type="text" class="form-control" placeholder="Search by Order ID"
               @oninput="e => HandleSearchInput(e.Value?.ToString() ?? string.Empty)"
               value="@SearchQuery" />
        <button class="btn btn-outline-secondary" @onclick="ClearSearch" type="button">
            <i class="fas fa-times"></i>
        </button>
    </div>
</div>

@if (PaginatedOrders.Any())
{
    <div class="table-responsive">
        <table class="table table-striped table-hover text-center">
            <thead class="table-dark">
                <tr>
                    <th>Order ID</th>
                    <th>Date</th>
                    <th>Status</th>
                    <th>Employee ID</th>
                    <th>Items Ordered</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in PaginatedOrders)
                {
                    <tr>
                        <td>@order.OrderId</td>
                        <td>@order.OrderDate.ToString("g")</td>
                        <td class="@GetStatusClass(order.Status)">@order.Status</td>
                        <td>@(order.EmployeeId ?? "N/A")</td>
                        <td>
                            @foreach (var item in order.OrderItems)
                            {
                                <span>@item.Name (@item.QuantityOrdered)</span>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private IEnumerable<Order> PaginatedOrders { get; set; }
    private string SelectedStatus { get; set; }
    private string SearchQuery { get; set; }
    private int CurrentPage { get; set; } = 1;
    private const int PageSize = 15;

    private IEnumerable<Order> FilteredOrders => OrderUseCases.GetOrdersByStatus(SelectedStatus)
        .Where(order => string.IsNullOrEmpty(SearchQuery) || order.OrderId.ToString().Contains(SearchQuery));

    private int TotalPages => (int)Math.Ceiling(FilteredOrders.Count() / (double)PageSize);

    protected override void OnInitialized()
    {
        PaginatedOrders = PaginateOrders(FilteredOrders, CurrentPage, PageSize);
    }

    private void HandleSearchInput(string query)
    {
        SearchQuery = query;
        PaginatedOrders = PaginateOrders(FilteredOrders, CurrentPage, PageSize);
    }

    private void ClearSearch()
    {
        SearchQuery = string.Empty;
        PaginatedOrders = PaginateOrders(FilteredOrders, CurrentPage, PageSize);
    }

    private void PreviousPage()
    {
        if (CurrentPage > 1)
        {
            CurrentPage--;
            PaginatedOrders = PaginateOrders(FilteredOrders, CurrentPage, PageSize);
        }
    }

    private void NextPage()
    {
        if (CurrentPage < TotalPages)
        {
            CurrentPage++;
            PaginatedOrders = PaginateOrders(FilteredOrders, CurrentPage, PageSize);
        }
    }

    private IEnumerable<Order> PaginateOrders(IEnumerable<Order> orders, int page, int pageSize)
    {
        return orders.Skip((page - 1) * pageSize).Take(pageSize);
    }

    private string GetStatusClass(string status)
    {
        return status switch
        {
            "Completed" => "text-success fw-bold", // Bootstrap 'success' color
            "Rejected" => "text-danger fw-bold", // Bootstrap 'danger' color
            _ => string.Empty // No special class for other statuses
        };
    }
}
