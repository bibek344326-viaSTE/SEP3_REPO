package com.javainuse.sep03.service;

import com.google.protobuf.Empty;
import com.google.protobuf.Timestamp;
import com.javainuse.orders.Order;
import com.javainuse.orders.OrderItem;
import com.javainuse.orders.OrderList;
import com.javainuse.orders.OrderRequest;
import com.javainuse.orders.OrderServiceGrpc;
import io.grpc.stub.StreamObserver;
import net.devh.boot.grpc.server.service.GrpcService;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.util.List;
import java.util.stream.Collectors;
 class RestOrder {
    public int orderId;
    public String orderStatus;
    public String deliveryDate; // Or OffsetDateTime if needed
    public List<RestOrderItem> orderItems;
    public Integer userId;
    public Integer createdById;
    public String createdAt; // ISO-8601 string, parseable as OffsetDateTime
}

 class RestOrderItem {
    public int orderItemId;
    public int orderId;
    public int itemId;
    public int quantityToPick;
}

@GrpcService
public class OrderService extends OrderServiceGrpc.OrderServiceImplBase {

    private final WebClient webClient;
    private final String baseUrl = "http://localhost:5299/Orders"; // Adjust this to your actual OrdersController base URL

    public OrderService() {
        this.webClient = WebClient.create(baseUrl);
    }

    @Override
    public void createOrder(OrderRequest request, StreamObserver<Order> responseObserver) {
        // Map from proto request to RestOrder DTO for the POST
        RestOrder restOrder = new RestOrder();
        restOrder.userId = request.getUserId();
        restOrder.createdById = request.getCreatedBy();
        // If the REST API requires orderStatus or deliveryDate, set defaults or handle accordingly
        // For simplicity, let's assume orderStatus defaults to "IN_PROGRESS" and deliveryDate is in the future.
        restOrder.orderStatus = "IN_PROGRESS";
        restOrder.deliveryDate = OffsetDateTime.now().plusDays(7).toString();

        restOrder.orderItems = request.getOrderItemsList().stream().map(oi -> {
            RestOrderItem item = new RestOrderItem();
            // orderItemId might be generated by the server, so we might not need to set it here if creating a new order.
            item.itemId = oi.getItemId();
            item.quantityToPick = oi.getQuantityToPick();
            return item;
        }).collect(Collectors.toList());

        webClient.post()
                .uri("") // baseUrl already set, POST to /Orders
                .bodyValue(restOrder)
                .retrieve()
                .bodyToMono(RestOrder.class)
                .subscribe(
                        createdRestOrder -> {
                            Order response = convertRestOrderToProto(createdRestOrder);
                            responseObserver.onNext(response);
                            responseObserver.onCompleted();
                        },
                        throwable -> {
                            responseObserver.onError(throwable);
                        }
                );
    }

    @Override
    public void getAllOrders(Empty request, StreamObserver<OrderList> responseObserver) {
        webClient.get()
                .uri("")
                .retrieve()
                .bodyToFlux(RestOrder.class)
                .collectList()
                .map(restOrders -> {
                    // Convert List<RestOrder> to OrderList
                    List<Order> protoOrders = restOrders.stream()
                            .map(this::convertRestOrderToProto)
                            .collect(Collectors.toList());

                    return OrderList.newBuilder().addAllOrders(protoOrders).build();
                })
                .subscribe(
                        orderList -> {
                            responseObserver.onNext(orderList);
                            responseObserver.onCompleted();
                        },
                        throwable -> responseObserver.onError(throwable)
                );
    }

    // Utility method to convert from RestOrder to the proto Order message
    private Order convertRestOrderToProto(RestOrder ro) {
        Order.Builder builder = Order.newBuilder()
                .setOrderId(ro.orderId)
                .setUserId(ro.userId != null ? ro.userId : 0)
                .setCreatedBy(ro.createdById != null ? ro.createdById : 0);

        // Convert orderItems
        if (ro.orderItems != null) {
            for (RestOrderItem roi : ro.orderItems) {
                OrderItem protoItem = OrderItem.newBuilder()
                        .setOrderItemId(roi.orderItemId)
                        .setItemId(roi.itemId)
                        .setQuantityToPick(roi.quantityToPick)
                        .build();
                builder.addOrderItems(protoItem);
            }
        }

        // Convert createdAt from ISO-8601 to Timestamp
        if (ro.createdAt != null) {
            OffsetDateTime odt = OffsetDateTime.parse(ro.createdAt);
            long seconds = odt.toEpochSecond();
            int nanos = odt.getNano();
            builder.setCreatedAt(Timestamp.newBuilder().setSeconds(seconds).setNanos(nanos));
        }

        return builder.build();
    }
}
