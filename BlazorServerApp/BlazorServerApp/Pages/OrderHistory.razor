@page "/order-history"

@using BlazorServerApp.Managers
@using Orders

@inject OrderHistoryManager OrderHistoryManager

<PageTitle>Order History</PageTitle>

<h1 class="text-center">Order History</h1>

<div class="d-flex align-items-center justify-content-center mb-3 w-100">
    <div class="me-4">
        <select class="form-select" @bind="OrderHistoryManager.SelectedStatus">
            <option value="">All Statuses</option>
            <option value="Completed">Completed</option>
            <option value="Pending">Pending</option>
            <option value="Rejected">Rejected</option>
        </select>
    </div>

    <div class="me-3">
        <input type="date" class="form-control" @bind="OrderHistoryManager.StartDate" />
    </div>

    <div class="me-3">
        <input type="date" class="form-control" @bind="OrderHistoryManager.EndDate" />
    </div>

    <div class="input-group">
        <span class="input-group-text">
            <i class="fas fa-search"></i>
        </span>
        <input type="text" class="form-control" placeholder="Search by Order ID"
               @bind="OrderHistoryManager.SearchQuery" @bind:event="oninput" />
        <button class="btn btn-outline-secondary" @onclick="OrderHistoryManager.ClearSearch" type="button">
            <i class="fas fa-times"></i>
        </button>
    </div>
</div>

@if (PaginatedOrders != null && PaginatedOrders.Any())
{
    <div class="table-responsive">
        <table class="table table-striped table-hover text-center">
            <thead class="table-dark">
                <tr>
                    <th>Order ID</th>
                    <th>Order Date</th>
                    <th>Status</th>
                    <th>Created By</th>
                    <th>Created At</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in PaginatedOrders)
                {
                    <tr>
                        <td>@order.OrderId</td>
                        <td>@order.CreatedAt.ToDateTime().ToString("g")</td>
                        <td class="@OrderHistoryManager.GetStatusClass(order.OrderStatus.ToString())">@order.OrderStatus</td>
                        <td>@order.CreatedByUser?.Username</td>
                        <td>@order.CreatedAt.ToDateTime().ToString("g")</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else
{
    <p>No orders found for the selected filters.</p>
}

<div class="d-flex justify-content-between align-items-center mt-3">
    <button class="btn btn-secondary" @onclick="PreviousPage" disabled="@IsFirstPage">
        <i class="fas fa-arrow-left"></i> Previous
    </button>
    <span>Page @OrderHistoryManager.CurrentPage of @TotalPages</span>
    <button class="btn btn-secondary" @onclick="NextPage" disabled="@IsLastPage">
        Next <i class="fas fa-arrow-right"></i>
    </button>
</div>

@code {
    private List<Order> PaginatedOrders;
    private bool IsFirstPage;
    private bool IsLastPage;
    private int TotalPages;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrders();
    }

    private async Task LoadOrders()
    {
        PaginatedOrders = (await OrderHistoryManager.GetPaginatedOrdersAsync()).ToList();
        TotalPages = await OrderHistoryManager.GetTotalPagesAsync();
        IsFirstPage = await OrderHistoryManager.IsFirstPageAsync();
        IsLastPage = await OrderHistoryManager.IsLastPageAsync();
    }

    private async Task PreviousPage()
    {
        OrderHistoryManager.PreviousPage();
        await LoadOrders();
    }

    private async Task NextPage()
    {
        await OrderHistoryManager.NextPageAsync();
        await LoadOrders();
    }
}
