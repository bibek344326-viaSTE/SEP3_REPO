@page "/order-history"
@using SEP3_Blazor_UI.Client.Application.UseCases
@using static SEP3_Blazor_UI.Client.models.Models
@inject OrderUseCases OrderUseCases

<PageTitle>Order History</PageTitle>

<h2 class="mb-4 text-center">Order History</h2>

<div class="d-flex align-items-center justify-content-center mb-3 w-100">
    <!-- Status Filter -->
    <div class="me-3">
        <select class="form-select" @bind="SelectedStatus" @bind:event="onchange">
            <option value="">All Statuses</option>
            <option value="Completed">Completed</option>
            <option value="Pending">Pending</option>
            <option value="Rejected">Rejected</option>
        </select>
    </div>

    <!-- Search Bar -->
    <div class="input-group">
        <span class="input-group-text">
            <i class="fas fa-search"></i>
        </span>
        <input type="text" class="form-control" placeholder="Search by Order ID"
               @oninput="e => HandleSearchInput(e.Value?.ToString() ?? string.Empty)"
               value="@SearchQuery" />
        <button class="btn btn-outline-secondary" @onclick="ClearSearch" type="button">
            <i class="fas fa-times"></i>
        </button>
    </div>
</div>

@if (PaginatedOrders.Any())
{
    <div class="table-responsive">
        <table class="table table-striped table-hover text-center">
            <thead class="table-dark">
                <tr>
                    <th class="col-1">Order ID</th>
                    <th class="col-2">Date</th>
                    <th class="col-1">Status</th>
                    <th class="col-1">Employee ID</th>
                    <th class="col-7">Items Ordered</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in PaginatedOrders)
                {
                    <tr>
                        <td>@order.OrderId</td>
                        <td>@order.OrderDate.ToString("g")</td>
                        <td>
                            <span class="badge status-badge @GetStatusClass(order.Status) d-flex justify-content-center align-items-center">
                                @order.Status
                            </span>
                        </td>
                        <td>@(order.EmployeeId ?? "N/A")</td>
                        <td>
                            <ul class="d-flex flex-wrap justify-content-center list-unstyled mb-0">
                                @foreach (var item in order.OrderItems)
                                {
                                    <li class="me-3">
                                        • @item.Name (@item.QuantityOrdered)
                                    </li>
                                }
                            </ul>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Pagination -->
    <div class="d-flex justify-content-between align-items-center mt-3 w-100">
        <button class="btn btn-secondary" @onclick="PreviousPage" disabled="@IsFirstPage">
            <i class="fas fa-arrow-left"></i> Previous
        </button>
        <span class="mx-3 text-center">Page @CurrentPage of @TotalPages</span>
        <button class="btn btn-secondary" @onclick="NextPage" disabled="@IsLastPage">
            Next <i class="fas fa-arrow-right"></i>
        </button>
    </div>

}
else
{
    <p class="text-muted text-center">No orders match the current filters.</p>
}

@code {
    private IEnumerable<Order> PaginatedOrders { get; set; }
    private string SelectedStatus { get; set; }
    private string SearchQuery { get; set; }
    private int CurrentPage { get; set; } = 1;
    private const int PageSize = 15;

    private bool IsFirstPage => CurrentPage <= 1;
    private bool IsLastPage => CurrentPage >= TotalPages;

    private IEnumerable<Order> FilteredOrders => OrderUseCases.GetOrdersByStatus(SelectedStatus)
    .Where(order => string.IsNullOrEmpty(SearchQuery) || order.OrderId.ToString().Contains(SearchQuery));

    private int TotalPages => (int)Math.Ceiling(FilteredOrders.Count() / (double)PageSize);

    protected override void OnInitialized()
    {
        PaginatedOrders = PaginateOrders(FilteredOrders, CurrentPage, PageSize);
    }

    private void HandleSearchInput(string query)
    {
        SearchQuery = query;
        PaginatedOrders = PaginateOrders(FilteredOrders, CurrentPage, PageSize);
    }

    private void ClearSearch()
    {
        SearchQuery = string.Empty;
        PaginatedOrders = PaginateOrders(FilteredOrders, CurrentPage, PageSize);
    }

    private void PreviousPage()
    {
        if (CurrentPage > 1)
        {
            CurrentPage--;
            PaginatedOrders = PaginateOrders(FilteredOrders, CurrentPage, PageSize);
        }
    }

    private void NextPage()
    {
        if (CurrentPage < TotalPages)
        {
            CurrentPage++;
            PaginatedOrders = PaginateOrders(FilteredOrders, CurrentPage, PageSize);
        }
    }

    private IEnumerable<Order> PaginateOrders(IEnumerable<Order> orders, int page, int pageSize)
    {
        return orders.Skip((page - 1) * pageSize).Take(pageSize);
    }

    private string GetStatusClass(string status)
    {
        return status switch
        {
            "Completed" => "bg-success text-white",
            "Pending" => "bg-warning text-white",
            "Rejected" => "bg-danger text-white",
            _ => "bg-secondary text-white"
        };
    }
}
