@page "/"
@using SEP3_REPO.SEP3_T1_BlazorApp.BlazorWebAppT1.Presentation.Managers;
@using SEP3_REPO.SEP3_T1_BlazorApp.BlazorWebAppT1.Application.UseCases;
@using SEP3_REPO.SEP3_T1_BlazorApp.BlazorWebAppT1.Models;
@using Microsoft.AspNetCore.Components.Forms

<PageTitle>Home</PageTitle>

<h1>Inventory Dashboard</h1>

<p>Welcome to your inventory management system.</p>

<!-- Search Bar -->
<div class="input-group mb-3">
    <input type="text" class="form-control" placeholder="Search by Name or Description" @bind="Manager.SearchQuery" @oninput="RefreshView" />
</div>

<!-- Table -->
<table class="table table-bordered table-hover">
    <thead class="thead-dark">
        <tr>
            <th>Select</th>
            <th>
                <button class="btn btn-link" @onclick="SortByName">
                    Name
                </button>
            </th>
            <th>
                <button class="btn btn-link" @onclick="SortByDescription">
                    Description
                </button>
            </th>
            <th>ID</th>
            <th>
                <button class="btn btn-link" @onclick="SortByQuantityInStore">
                    Quantity In Store
                </button>
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in PagedItems)
        {
            <tr @key="item.Id">
                <td>
                    <!-- Instead of using @bind-Value:change, we use the ValueChanged event -->
                    <InputCheckbox Value="@item.IsSelected"
                                   ValueChanged="(bool value) => ToggleSelection(item, value)"
                                   ValueExpression="@(() => item.IsSelected)" />
                </td>
                <td><InputText @bind-Value="item.Name" /></td>
                <td><InputText @bind-Value="item.Description" /></td>
                <td>@item.Id</td>
                <td><InputNumber TValue="int" @bind-Value="item.QuantityInStore" /></td>
            </tr>
        }
    </tbody>
</table>

<div>
    <button class="btn btn-secondary" @onclick="PreviousPage">Previous</button>
    <span>Page @Manager.CurrentPage of @Manager.TotalPages</span>
    <button class="btn btn-secondary" @onclick="NextPage">Next</button>
</div>

@code {
    public InventoryManager Manager { get; set; }

    [Inject] private ItemUseCases ItemUseCases { get; set; }
    [Inject] private OrderUseCases OrderUseCases { get; set; }

    protected override void OnInitialized()
    {
        Manager = new InventoryManager(ItemUseCases, OrderUseCases);
    }

    private void RefreshView() => StateHasChanged();

    private IEnumerable<Item> PagedItems => Manager.FilterAndSortItems();

    private void SortByName() => Manager.SortByColumn("Name");

    private void SortByDescription() => Manager.SortByColumn("Description");

    private void SortByQuantityInStore() => Manager.SortByColumn("QuantityInStore");

    private void ClearSearch() => Manager.SearchQuery = string.Empty;

    private void ToggleSelection(Item item, bool value)
    {
        item.IsSelected = value;
    }

    private async Task DeleteItem(Item item)
    {
        // Placeholder for future implementation
        await Task.CompletedTask;
    }

    private string GetSortIcon(string columnName)
    {
        if (Manager.SortColumn == columnName)
        {
            return Manager.Ascending ? "fas fa-sort-up" : "fas fa-sort-down";
        }
        return "fas fa-sort";
    }

    private async Task PreviousPage()
    {
        Manager.PreviousPage();
        await Task.CompletedTask;
    }

    private async Task NextPage()
    {
        Manager.NextPage();
        await Task.CompletedTask;
    }
}
