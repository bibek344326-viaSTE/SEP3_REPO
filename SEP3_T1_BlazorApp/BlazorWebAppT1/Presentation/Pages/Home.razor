@page "/"
@using SEP3_REPO.SEP3_T1_BlazorApp.BlazorWebAppT1.Presentation.Managers;
@using SEP3_REPO.SEP3_T1_BlazorApp.BlazorWebAppT1.Application.UseCases;
@using SEP3_REPO.SEP3_T1_BlazorApp.BlazorWebAppT1.Models;
@using Microsoft.AspNetCore.Components.Forms

<PageTitle>Home</PageTitle>

<h1>Inventory Dashboard</h1>

<p>Welcome to your inventory management system.</p>

<!-- Search Bar -->
<div class="input-group mb-3">
    <div class="input-group-prepend">
        <span class="input-group-text h-100 w-100">
            <i class="fas fa-search"></i>
        </span>
    </div>
    <input type="text" class="form-control" placeholder="Search by Name or Description" @bind="Manager.SearchQuery" @oninput="RefreshView" />
    <div class="input-group-append">
        <button class="btn btn-outline-secondary" @onclick="ClearSearch" type="button">
            <i class="fas fa-times"></i> Clear
        </button>
    </div>
</div>

<!-- Table -->
<table class="table table-bordered table-hover">
    <thead class="thead-dark">
        <tr>
            <th class="text-center">Select</th>
            <th>
                <button class="btn btn-link" @onclick="() => SortByName()">
                    Name <i class="@GetSortIcon("Name")"></i>
                </button>
            </th>
            <th>
                <button class="btn btn-link" @onclick="() => SortByDescription()">
                    Description <i class="@GetSortIcon("Description")"></i>
                </button>
            </th>
            <th>ID</th>
            <th>
                <button class="btn btn-link" @onclick="() => SortByQuantityInStore()">
                    Quantity In Store <i class="@GetSortIcon("QuantityInStore")"></i>
                </button>
            </th>
            <th>Order Quantity</th>
            <th class="text-center">Delete</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in PagedItems)
        {
            <tr @key="item.Id">
                <td class="text-center">
                    <!-- Updated line: Use @bind-Value instead of @bind -->
                    <InputCheckbox @bind-Value="item.IsSelected" @oninput="() => ToggleSelection(item)" />
                </td>
                <td><InputText @bind-Value="item.Name" class="form-control" /></td>
                <td><InputText @bind-Value="item.Description" class="form-control" /></td>
                <td>@item.Id</td>
                <td><InputNumber TValue="int" @bind-Value="item.QuantityInStore" class="form-control" min="0" /></td>
                <td><InputNumber TValue="int" @bind-Value="item.OrderQuantity" class="form-control" min="1" max="@item.QuantityInStore" disabled="@(item.IsSelected == false)" /></td>
                <td class="text-center">
                    <button class="btn btn-danger btn-sm" @onclick="() => DeleteItem(item)">
                        <i class="fas fa-trash-alt"></i> Delete
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>

<!-- Pagination -->
<div class="d-flex justify-content-between align-items-center mt-3">
    <button class="btn btn-secondary" @onclick="PreviousPage" disabled="@Manager.IsFirstPage">
        <i class="fas fa-arrow-left"></i> Previous
    </button>
    <span>Page @Manager.CurrentPage of @Manager.TotalPages</span>
    <button class="btn btn-secondary" @onclick="NextPage" disabled="@Manager.IsLastPage">
        Next <i class="fas fa-arrow-right"></i>
    </button>
</div>

<div class="my-3">
    <button class="btn btn-primary w-100" @onclick="PlaceOrder" disabled="@(!Manager.FilterAndSortItems().Any(i => i.IsSelected))">
        <i class="fas fa-shopping-cart"></i> Place Order
    </button>
</div>

@code {
    private InventoryManager Manager { get; set; }

    // Injected UseCases
    [Inject] private ItemUseCases ItemUseCases { get; set; }
    [Inject] private OrderUseCases OrderUseCases { get; set; }

    protected override void OnInitialized()
    {
        // Initialize Manager with injected dependencies
        Manager = new InventoryManager(ItemUseCases, OrderUseCases);
    }

    private void RefreshView() => StateHasChanged();

    private IEnumerable<Item> PagedItems => Manager.FilterAndSortItems()
        .Skip((Manager.CurrentPage - 1) * Manager.PageSize)
        .Take(Manager.PageSize);

    private void SortByName() => Manager.SortByColumn("Name");
    private void SortByDescription() => Manager.SortByColumn("Description");
    private void SortByQuantityInStore() => Manager.SortByColumn("QuantityInStore");

    private string GetSortIcon(string columnName) => Manager.SortColumn == columnName
        ? (Manager.Ascending ? "fas fa-sort-up" : "fas fa-sort-down")
        : "fas fa-sort";

    private void ClearSearch()
    {
        Manager.SearchQuery = string.Empty;
        RefreshView();
    }

    private void ToggleSelection(Item item) => Manager.ToggleSelection(item);
    private void PlaceOrder() => Manager.PlaceOrder();
    private void PreviousPage() => Manager.PreviousPage();
    private void NextPage() => Manager.NextPage();

    private void DeleteItem(Item item)
    {
        ItemUseCases.DeleteItem(item); // Use ItemUseCases to delete the item
    }
}
